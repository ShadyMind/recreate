#!/usr/bin/env node

"use strict";

const path = require('path');
const { promises: fs } = require('fs');
const exec = require('util').promisify(require('child_process').exec);

const DIR = path.resolve(__dirname, '..', 'artifacts');

const tupelisePromise = (promise) => new Promise((resolve) => {
    promise
        .then((data) => resolve([null, data]))
        .catch((error) => resolve([error, null]));
});

const formatDate = (date, meta, commitid) => [
    meta.version,
    '-',
    ('' + commitid.slice(-7)),
    '-',
    ('' + date.getYear()).padStart(2, '0'),
    '-',
    ('' + date.getMonth()).padStart(2, '0'),
    '-',
    ('' + date.getHours()).padStart(2, '0'),
    ('' + date.getMinutes()).padStart(2, '0'),
].join('');

async function main() {
    const [
        _,
        revParseOutput,
        packageJsonBuffer,
    ] = await Promise.all([
        Boolean(process.env['NO_CHAIN'])
            ? Promise.resolve()
            : exec(`DIR=${DIR.replace(process.cwd(), '').slice(1)} ${path.resolve(__dirname, 'build')}`),
        exec(`git rev-parse HEAD`),
        fs.readFile(path.resolve(__dirname, '..', 'package.json')),
    ]);

    const meta = JSON.parse(packageJsonBuffer.toString('utf-8'));
    const date = formatDate(new Date(), meta, revParseOutput.stdout);

    await fs.mkdir(path.resolve(DIR, 'packages', date), { recursive: true });

    await Promise.all(['index.js', 'index.min.js', 'index.js.map', 'index.d.ts'].map((filename) => (
        fs.copyFile(
            path.resolve(DIR, 'build', filename),
            path.resolve(DIR, 'packages', date, filename.replace('index', meta.name)),
        )
    )));
            
    const packMeta = {};
    packMeta.name = meta.name;
    packMeta.version = meta.version;
    packMeta.description = meta.description;
    packMeta.main = './index.min.js';
    packMeta.types = './index.d.ts';
    packMeta.scripts = {};
    packMeta.keywords = meta.keywords;
    packMeta.author = meta.author;
    packMeta.contributors = meta.contributors;
    packMeta.license = meta.license;
    packMeta.bugs = meta.bugs;
    packMeta.homepage = meta.homepage;
    packMeta.repository = meta.repository;
    packMeta.private = false;
    packMeta.dependencies = {};

    await fs.writeFile(
        path.resolve(DIR, 'packages', date, 'package.json'),
        JSON.stringify(packMeta, null, 2),
    );


    let [staterr, stat] = await tupelisePromise(fs.lstat(path.resolve(DIR, 'packages', '_latest')));

    if (!staterr || staterr.code !== 'ENOENT') {
        if (stat.isSymbolicLink()) {
            await fs.unlink(path.resolve(DIR, 'packages', '_latest'));
        } else {
            await fs.rm(path.resolve(DIR, 'packages', '_latest'));
        }
    } 
    

    const files = await fs.readdir(path.resolve(DIR, 'packages'));

    await Promise.all(
        files
            .sort(name => Number.parseInt(name, 10))
            .slice(0, -6)
            .map((file) => fs.rm(
                path.resolve(DIR, 'packages', file),
                { recursive: true }
            ))
    );

    await fs.symlink(
        path.resolve(DIR, 'packages', date),
        path.resolve(DIR, 'packages', '_latest')
    );

};

if (require.main === module) {
    main();
} else {
    module.exports = main;
}